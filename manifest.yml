modules: 
  confluence:globalPage:
    - key: DocuLink
      resource: main
      resolver:
        function: resolver
      title: DocuLink
      route: doculink
  function:
    - key: resolver
      handler: index.handler
    - key: keywordTrigger
      handler: index.keywordTrigger
    - key: hierarchyTrigger
      handler: index.hierarchyTrigger
    - key: nodesTrigger
      handler: index.nodesTrigger
    - key: labelsTrigger
      handler: index.labelsTrigger
    - key: fetchConfluencePages
      handler: index.fetchConfluencePages
    - key: registerKeywords
      handler: index.registerKeywords
    - key: registerRelationships
      handler: index.registerRelationships
  scheduledTrigger:
    - key: keyword-scheduled-trigger
      function: keywordTrigger
      interval: hour # Runs hourly
    - key: hierarchy-scheduled-trigger
      function: hierarchyTrigger
      interval: hour # Runs hourly
    - key: nodes-scheduled-trigger
      function: nodesTrigger
      interval: hour # Runs hourly
    - key: labels-scheduled-trigger
      function: labelsTrigger
      interval: hour # Runs hourly
  rovo:agent:
    - key: keyword-extractor-agent
      name: Keyword Extractor Agent
      description: >
        An agent for extracting key keywords from Confluence pages.
      prompt: >
        Role: You are responsible for analyzing documents and extracting key keywords to help users easily understand the content.
        
        I'll separate the instructions for each job with a '---' on a new line, followed by the job title.
        
        You can perform the following jobs based on the user's request:
          a. Extract keywords from a list of Confluence pages
          b. Register keywords
        
        ---

        a. Extract keywords from a list of Confluence pages

        To do this, follow these steps:

        1. Fetch the text of the Confluence pages from all Confluence pages using the 'fetch-confluence-pages' action.
        2. Extract the keywords from the text of all Confluence pages according to the user's request.
        3. Structure your response as follows:
           - Response should be in JSON format. Json should have "documents" field. "documents" field should have "id" and "keywords" fields. JSON format should be following format:
             ```JSON
             {
                "documents": [
                  {
                    "id": Page Id,
                    "keywords": [Extracted Keywords],
                  },
                  ...
                ]
             }
             ```
           - Follow these rules:
            - Do not mention specific issue details unless asked by the user.
        4. Return the response to the user. 
        
        ----

        b. Register keywords

        To do this, follow these steps:

        1. Perform the 'register-keywords' action to register each of the Confluence page ID and keywords created in the previous step according to the user's request.
        2. Return the result to the user. 
        
        ----

      conversationStarters:
        - Extract and register keywords for all Confluence pages for JSON format

      actions:
        - fetch-confluence-pages
        - register-keywords
    - key: relation-analyzer-agent
      name: Relation Analyzer Agent
      description: >
        An agent for analyzing and determining relationships between Confluence pages.
      prompt: >
        Role: You are responsible for analyzing documents and determining their relationships.
                
        I'll separate the instructions for each job with a '---' on a new line, followed by the job title.
        
        You must perform the following jobs based on the user's request:
          a. Analyze relationships between Confluence pages
          b. Register relationships
        
        ---
        
        a. Analyze relationships between Confluence pages

        To do this, follow these steps:
  
        1. Fetch the text and metadata of all Confluence pages using the 'fetch-confluence-pages' action.
        2. Analyze the relationships between the Confluence pages based on their content.
        3. Structure the relationships must be JSON format as follows:
           - The relationships must have a "relationships" field. The "relationships" field should contain objects with "source", "target", and "type" fields in the following format:
             ```JSON
             {
                "relationships": [
                  {
                    "source": "12345", // Ensure the Confluence page ID for the source
                    "target": "56789", // Ensure the Confluence page ID for the target
                    "type": "rovo" // Ensure the type is always "rovo"
                  },
                  ...
                ]
             }
             ```
           - Follow these rules:
             - Do not include explanations or descriptions in plain text.
             - Ensure all relationships are included in the JSON structure.
        4. These relationships are used in job b. Register relationships.
       
        ---
    
        b. Register relationships
  
        To do this, follow these steps:
        
        1. Perform the 'register-relationships' action to register the relationships created in the previous step according to the user's request.
        2. Return the result to the user.
        
        ---

      conversationStarters:
        - Analyze and register relationships between all Confluence page

      actions:
        - fetch-confluence-pages
        - register-relationships

  action:
    - key: fetch-confluence-pages
      name: fetch-confluence-pages
      function: fetchConfluencePages
      actionVerb: GET
      description: >
        This action fetches the text of Confluence pages.
    - key: register-keywords
      name: register-keywords
      function: registerKeywords
      actionVerb: CREATE
      description: >
        This action registers keywords.
      inputs:
        documents:
          title: Documents
          type: string
          required: true
          description: |
            "The list of the all Confluence pages with page id and keywords"
    - key: register-relationships
      name: register-relationships
      function: registerRelationships
      actionVerb: CREATE
      description: >
        This action registers relationships.
      inputs:
        relationships:
          title: Relationships
          type: string
          required: true
          description: | 
            "The list of the relationships about all Confluence pages"
resources:
  - key: main
    path: src/fe/build

app:
  runtime:
    name: nodejs20.x
  id: ari:cloud:ecosystem::app/4b9676c8-ccca-4066-9faa-8192bbf3f900

permissions:
  scopes:
    - write:confluence-content
    - read:confluence-content.all
    - read:content.metadata:confluence
    - read:confluence-content.summary
    - search:confluence
    - read:page:confluence
    - read:space:confluence
    - read:label:confluence
    - storage:app
    - manage:confluence-configuration
    - read:confluence-user
  content:
    styles:
      - 'unsafe-inline'